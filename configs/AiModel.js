const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
};

export const courseOutlineAIModel = model.startChat({
    generationConfig,
    history: [
        {
            role: "user",
            parts: [
                {
                    text: "Generate a study material for Python for Exam and level of difficulty will be EASY with summery of course, List of Chapters along with summery  for each chapter, Topic list in each chapter in JSON format \n",
                },
            ],
        },
        {
            role: "model",
            parts: [
            {
                text: "```json\n{\n  \"course_name\": \"Introduction to Python Programming\",\n  \"difficulty\": \"Easy\",\n  \"course_summary\": \"This course provides a gentle introduction to Python programming, covering fundamental concepts and syntax. It is designed for beginners with no prior programming experience, focusing on building a solid foundation for further learning. You'll learn how to write simple programs, work with data, and understand basic programming logic.\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Getting Started with Python\",\n      \"chapter_summary\": \"This chapter introduces the Python programming language, how to set up your environment, and write your first basic program. It covers the essential tools and concepts needed to begin coding.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why learn Python?\",\n        \"Setting up the Python environment (Installation, IDE/Text Editor)\",\n        \"Writing your first Python program (Hello, World!)\",\n        \"Running Python programs\",\n          \"Understanding basic Python Syntax\"\n        \n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Variables and Data Types\",\n      \"chapter_summary\": \"This chapter introduces the concept of variables, and basic data types including numbers, strings and booleans. It will allow the student to store and manipulate information in Python\",\n      \"topics\": [\n        \"What are variables?\",\n        \"Declaring and assigning variables\",\n        \"Data types: Integers (int), Floating-point numbers (float), Strings (str), Booleans (bool)\",\n        \"Basic operations on data types (+, -, *, /, %, string concatenation)\",\n        \"Type conversion (casting)\"\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Input and Output\",\n      \"chapter_summary\": \"This chapter teaches how to interact with the user, to display information on the screen and receive input from the user. This will enable the student to write interactive programs.\",\n      \"topics\": [\n        \"The `print()` function for output\",\n        \"Formatting output using f-strings\",\n        \"The `input()` function for user input\",\n        \"Working with user input strings\"\n      ]\n    },\n      {\n          \"chapter_number\": 4,\n          \"chapter_title\": \"Basic Operators and Expressions\",\n          \"chapter_summary\": \"This chapter teaches about operators like arthimetic, comparison and logical. This will enable the student to create complex expressions and perform operations based on conditions.\",\n           \"topics\":[\n               \"Arithmetic Operators (+, -, *, /, %, **, //)\",\n                \"Comparison Operators (==, !=, >, <, >=, <=)\",\n               \"Logical Operators (and, or, not)\",\n               \"Operator precedence\",\n               \"Writing expressions in Python\"\n               ]\n      },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Conditional Statements\",\n      \"chapter_summary\": \"This chapter will help you make decisions in programs, based on conditions. The students will use the `if`, `elif` and `else` keywords to control the flow of the program.\",\n      \"topics\": [\n          \"The `if` statement\",\n          \"The `if-else` statement\",\n        \"The `if-elif-else` statement\",\n        \"Nested `if` statements\",\n          \"Simple conditional logic examples\"\n      ]\n    }\n  ]\n}\n```\n"
                },
            ],
        },
    ],
});


export const generateNotesAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate exam material detail content for each chapter, Make sure to include all topic point in the content; make sure to give content in HTML format (Do not Add HTMLK, Head, Body, title tag) , The chapters : {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Basic Data Types and Operations Practice\",\n      \"chapter_summary\": \"This chapter provides practice exercises on working with integers, floats, strings, and booleans. You'll work on performing basic arithmetic operations and string manipulations.\",\n      \"topics\": [\n        \"Integer operations (addition, subtraction, multiplication, division)\",\n        \"Float operations and precision\",\n        \"String concatenation and formatting\",\n        \"Boolean logic and comparisons\",\n        \"Type conversion exercises\"\n      ]\n    },"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```html\n<h2>Chapter 1: Basic Data Types and Operations Practice</h2>\n<p><strong>Chapter Summary:</strong> This chapter provides practice exercises on working with integers, floats, strings, and booleans. You'll work on performing basic arithmetic operations and string manipulations.</p>\n\n<h3>Topics Covered:</h3>\n\n<h4>1. Integer Operations (Addition, Subtraction, Multiplication, Division)</h4>\n<ul>\n    <li><strong>Conceptual Understanding:</strong> Understanding the properties of integers and how arithmetic operators (+, -, *, /) behave with integer operands. Remember integer division truncates the decimal portion.</li>\n    <li><strong>Example Questions:</strong>\n        <ul>\n            <li>What is the result of <code>15 + 7</code>?</li>\n            <li>Calculate <code>25 - 12</code>.</li>\n            <li>What is <code>8 * 6</code>?</li>\n            <li>What is the result of integer division: <code>30 / 7</code>?</li>\n            <li>Evaluate the expression: <code>(10 + 5) * 2 - 8 / 2</code></li>\n            <li>Write a program that takes two integer inputs from the user and calculates their sum, difference, product, and quotient (integer division).</li>\n        </ul>\n    </li>\n    <li><strong>Key Concepts to Test:</strong> Order of operations (PEMDAS/BODMAS), integer division.</li>\n</ul>\n\n<h4>2. Float Operations and Precision</h4>\n<ul>\n    <li><strong>Conceptual Understanding:</strong> Understanding how floating-point numbers are represented and the potential for precision errors.  Floating-point division results in a float.</li>\n    <li><strong>Example Questions:</strong>\n        <ul>\n            <li>What is the result of <code>3.14 + 2.71</code>?</li>\n            <li>Calculate <code>10.0 / 3.0</code>. What type of data is the result?</li>\n            <li>What is the value of <code>2.5 * 4.0 - 1.0</code>?</li>\n            <li>Explain why <code>0.1 + 0.2</code> might not equal <code>0.3</code> exactly in some programming environments.</li>\n            <li>Write a program that calculates the area of a circle given its radius (a float).</li>\n            <li>What is the different between a `float` and an `integer` data type?</li>\n        </ul>\n    </li>\n    <li><strong>Key Concepts to Test:</strong> Floating-point precision, handling decimal values, float division.</li>\n</ul>\n\n<h4>3. String Concatenation and Formatting</h4>\n<ul>\n    <li><strong>Conceptual Understanding:</strong> Combining strings together using concatenation (+) and formatting strings using methods like f-strings or <code>format()</code>.</li>\n    <li><strong>Example Questions:</strong>\n        <ul>\n            <li>Concatenate the strings \"Hello\" and \" World!\" to create a single string.</li>\n            <li>Using f-strings (or similar string formatting methods), create a string that includes a variable named <code>name</code> and a variable named <code>age</code>.  For example: \"My name is [name] and I am [age] years old.\"</li>\n            <li>Write a program that takes the user's first and last name as input and prints a greeting message using string concatenation.</li>\n            <li>What is the output of <code>\"Python\" + \" \" + \"Programming\"</code>?</li>\n            <li>Given the variables <code>item = \"book\"</code> and <code>price = 15.99</code>, format a string to display \"The price of a book is $15.99\".</li>\n        </ul>\n    </li>\n    <li><strong>Key Concepts to Test:</strong> String immutability, using <code>+</code> for concatenation, string formatting methods, handling spaces.</li>\n</ul>\n\n<h4>4. Boolean Logic and Comparisons</h4>\n<ul>\n    <li><strong>Conceptual Understanding:</strong> Using boolean operators (<code>and</code>, <code>or</code>, <code>not</code>) and comparison operators (<code>==</code>, <code>!=</code>, <code>></code>, <code><</code>, <code>>=</code>, <code><=</code>) to evaluate conditions.</li>\n    <li><strong>Example Questions:</strong>\n        <ul>\n            <li>Evaluate the expression: <code>(5 > 3) and (10 < 20)</code></li>\n            <li>What is the result of <code>not (5 == 5)</code>?</li>\n            <li>Evaluate: <code>(10 >= 10) or (4 != 4)</code></li>\n            <li>Write a program that takes an integer as input and prints \"Even\" if the number is even, and \"Odd\" if the number is odd. (Use the modulo operator <code>%</code>).</li>\n            <li>What is the difference between the assignment operator (=) and the equality operator (==)?</li>\n            <li>Given <code>x = 5</code> and <code>y = 10</code>, is the statement <code>(x > 0) and (y < 20) or (x == y)</code> true or false?</li>\n        </ul>\n    </li>\n    <li><strong>Key Concepts to Test:</strong> Truth tables for boolean operators, operator precedence, using comparison operators correctly.</li>\n</ul>\n\n<h4>5. Type Conversion Exercises</h4>\n<ul>\n    <li><strong>Conceptual Understanding:</strong> Converting data from one type to another using functions like <code>int()</code>, <code>float()</code>, <code>str()</code>, and <code>bool()</code>.</li>\n    <li><strong>Example Questions:</strong>\n        <ul>\n            <li>Convert the string \"123\" to an integer.</li>\n            <li>Convert the integer 42 to a float.</li>\n            <li>Convert the float 3.14 to a string.</li>\n            <li>What is the result of converting the string \"True\" to a boolean? What about the string \"False\"?</li>\n            <li>Write a program that takes a float input from the user and converts it to an integer, printing both the original float and the converted integer.</li>\n            <li>What happens if you try to convert the string \"hello\" to an integer? How would you handle this potential error?</li>\n        </ul>\n    </li>\n    <li><strong>Key Concepts to Test:</strong> Understanding when type conversion is necessary, handling potential errors during conversion, implicit vs. explicit type conversion.</li>\n</ul>\n```"},
        ],
      },
    ],
  });

export const GenerateStudyTypeContentAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate the flashcard on topic: Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation in JSON format with front back content, Maximum 15"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n[\n  {\n    \"front\": \"What is Flutter?\",\n    \"back\": \"Flutter is a UI toolkit developed by Google for building natively compiled applications for mobile, web, and desktop from a single codebase.\"\n  },\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the basic building block of Flutter's UI. Everything you see on the screen is a Widget.\"\n  },\n  {\n    \"front\": \"What are the two main types of Widgets?\",\n    \"back\": \"StatelessWidgets and StatefulWidgets.\"\n  },\n  {\n    \"front\": \"What is the difference between StatelessWidget and StatefulWidget?\",\n    \"back\": \"StatelessWidget's UI is static and doesn't change after it's built. StatefulWidget's UI can change dynamically based on user interaction or data updates.\"\n  },\n  {\n    \"front\": \"What is the `build` method used for in Flutter?\",\n    \"back\": \"The `build` method describes the part of the user interface represented by this widget. It's responsible for returning the Widget tree.\"\n  },\n  {\n    \"front\": \"What is the purpose of the `MaterialApp` widget?\",\n    \"back\": \"The `MaterialApp` widget is a central widget that sets up the basic app structure, theme, and routing for a Material Design app.\"\n  },\n  {\n    \"front\": \"How do you define a route in Flutter?\",\n    \"back\": \"Routes are defined using a `Map<String, WidgetBuilder>` and passed to the `routes` property of `MaterialApp`.  The keys are route names (e.g., '/'), and the values are functions that build the corresponding widget.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Using `Navigator.push(context, MaterialPageRoute(builder: (context) => YourNewScreen()));`\"\n  },\n  {\n    \"front\": \"What is `Navigator.pop(context)` used for?\",\n    \"back\": \"It's used to remove the current route from the navigator and go back to the previous screen.\"\n  },\n  {\n    \"front\": \"What's the difference between `push` and `pushReplacementNamed` navigation?\",\n    \"back\": \"`push` adds a new route on top of the existing stack, allowing you to go back. `pushReplacementNamed` replaces the current route with the new one, preventing the user from going back to the previous screen using the back button.\"\n  },\n  {\n    \"front\": \"What are some common layout widgets in Flutter?\",\n    \"back\": \"Column, Row, Container, Padding, Center, Expanded, SizedBox.\"\n  },\n  {\n    \"front\": \"What is the purpose of the `Scaffold` widget?\",\n    \"back\": \"The `Scaffold` widget provides a basic app structure, including an AppBar, body, floating action button, and bottom navigation bar.\"\n  },\n  {\n    \"front\": \"How do you add padding around a widget?\",\n    \"back\": \"Use the `Padding` widget.  Example: `Padding(padding: EdgeInsets.all(16.0), child: YourWidget())`\"\n  },\n  {\n    \"front\": \"What is the purpose of `GestureDetector` widget?\",\n    \"back\": \"It detects various gestures like taps, drags, and swipes and allows you to respond to them.\"\n  },\n  {\n    \"front\": \"How can you make a Widget take all available space in a Row or Column?\",\n    \"back\": \"Use the `Expanded` widget. Wrap your widget with `Expanded`.\"\n  }\n]\n```"},
        ],
      },
    ],
  });

  export const GenerateQuizAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate Quiz on topic: Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation with Question and Options, along with correct answer in JSON format "},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals and UI Development\",\n  \"questions\": [\n    {\n      \"questionText\": \"What is Flutter?\",\n      \"options\": [\n        \"A back-end framework\",\n        \"A cross-platform UI toolkit\",\n        \"A database management system\",\n        \"A programming language\"\n      ],\n      \"correctAnswer\": \"A cross-platform UI toolkit\",\n      \"explanation\": \"Flutter is an open-source UI software development toolkit created by Google. It is used to develop cross platform applications for Android, iOS, Linux, macOS, Windows, Google Fuchsia, and the web from a single codebase.\"\n    },\n    {\n      \"questionText\": \"Which programming language is used to develop Flutter apps?\",\n      \"options\": [\n        \"Java\",\n        \"Kotlin\",\n        \"Dart\",\n        \"Swift\"\n      ],\n      \"correctAnswer\": \"Dart\",\n      \"explanation\": \"Flutter uses Dart as its programming language. Dart is an object-oriented, class defined, garbage-collected programming language developed by Google.\"\n    },\n    {\n      \"questionText\": \"What is a Widget in Flutter?\",\n      \"options\": [\n        \"A database component\",\n        \"A building block of the user interface\",\n        \"A server-side script\",\n        \"A network protocol\"\n      ],\n      \"correctAnswer\": \"A building block of the user interface\",\n      \"explanation\": \"In Flutter, everything is a widget. Widgets are the basic building blocks of the UI and describe how your application's view should look like given its current configuration and state.\"\n    },\n    {\n      \"questionText\": \"What is the difference between StatelessWidget and StatefulWidget?\",\n      \"options\": [\n        \"StatelessWidget can change its state, StatefulWidget cannot\",\n        \"StatefulWidget can change its state, StatelessWidget cannot\",\n        \"They are the same, both can change state\",\n        \"Neither can change state\"\n      ],\n      \"correctAnswer\": \"StatefulWidget can change its state, StatelessWidget cannot\",\n      \"explanation\": \"A StatelessWidget does not have any internal state to manage. Its output depends entirely on its configuration. A StatefulWidget, on the other hand, maintains state that can change over time, triggering a rebuild of the widget.\"\n    },\n    {\n      \"questionText\": \"Which widget is used to create a button in Flutter?\",\n      \"options\": [\n        \"Container\",\n        \"Text\",\n        \"ElevatedButton\",\n        \"Row\"\n      ],\n      \"correctAnswer\": \"ElevatedButton\",\n      \"explanation\": \"ElevatedButton (formerly RaisedButton) is a commonly used widget to create a button with a raised appearance in Flutter.\"\n    },\n    {\n      \"questionText\": \"Which layout widget arranges children in a horizontal line?\",\n      \"options\": [\n        \"Column\",\n        \"Row\",\n        \"Stack\",\n        \"Center\"\n      ],\n      \"correctAnswer\": \"Row\",\n      \"explanation\": \"The Row widget arranges its children in a horizontal array.  Its counterpart, Column, arranges them vertically.\"\n    },\n    {\n      \"questionText\": \"Which layout widget arranges children in a vertical line?\",\n      \"options\": [\n        \"Column\",\n        \"Row\",\n        \"Stack\",\n        \"Center\"\n      ],\n      \"correctAnswer\": \"Column\",\n      \"explanation\": \"The Column widget arranges its children in a vertical array. Its counterpart, Row, arranges them horizontally.\"\n    },\n    {\n      \"questionText\": \"Which widget allows you to position children on top of each other?\",\n      \"options\": [\n        \"Column\",\n        \"Row\",\n        \"Stack\",\n        \"Center\"\n      ],\n      \"correctAnswer\": \"Stack\",\n      \"explanation\": \"The Stack widget allows you to overlay multiple widgets on top of each other.  You can control the positioning of each child within the stack.\"\n    },\n    {\n      \"questionText\": \"What is the purpose of the `Navigator` widget in Flutter?\",\n      \"options\": [\n        \"To display text\",\n        \"To manage the app's routing and navigation\",\n        \"To create animations\",\n        \"To handle network requests\"\n      ],\n      \"correctAnswer\": \"To manage the app's routing and navigation\",\n      \"explanation\": \"The Navigator widget is responsible for managing the app's routing and navigation stack. It allows you to push new routes (screens) onto the stack and pop routes off the stack to navigate back.\"\n    },\n    {\n      \"questionText\": \"Which method is used to navigate to a new screen using the Navigator?\",\n      \"options\": [\n        \"Navigator.push()\",\n        \"Navigator.pop()\",\n        \"Navigator.goTo()\",\n        \"Navigator.navigateTo()\"\n      ],\n      \"correctAnswer\": \"Navigator.push()\",\n      \"explanation\": \"`Navigator.push()` is the method used to push a new route (screen) onto the navigation stack. This causes the new screen to appear.\"\n    },\n    {\n      \"questionText\": \"Which method is used to return to the previous screen using the Navigator?\",\n      \"options\": [\n        \"Navigator.push()\",\n        \"Navigator.pop()\",\n        \"Navigator.goTo()\",\n        \"Navigator.navigateTo()\"\n      ],\n      \"correctAnswer\": \"Navigator.pop()\",\n      \"explanation\": \"`Navigator.pop()` is the method used to pop the current route off the navigation stack, returning to the previous screen.\"\n    },\n    {\n      \"questionText\": \"What is the purpose of the `BuildContext` in Flutter?\",\n      \"options\": [\n        \"To store application data\",\n        \"To provide access to the widget tree and its dependencies\",\n        \"To handle user input events\",\n        \"To manage the application's state\"\n      ],\n      \"correctAnswer\": \"To provide access to the widget tree and its dependencies\",\n      \"explanation\": \"The `BuildContext` provides access to information about the location of a widget within the widget tree. It allows widgets to access theme data, media queries, and other inherited information.\"\n    }\n  ]\n}\n```"},
        ],
      },
    ],
  });


export  const GenerateQaAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate Question/Answer on topic: Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation  in JSON format "},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n[\n  {\n    \"question\": \"What is Flutter and what are its key advantages for UI development?\",\n    \"answer\": \"Flutter is Google's UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase. Key advantages include: hot reload for faster development, expressive and flexible UI through rich widgets, native performance, and cross-platform compatibility.\"\n  },\n  {\n    \"question\": \"Explain the 'Everything is a Widget' concept in Flutter.\",\n    \"answer\": \"In Flutter, almost everything you see and interact with on the screen is a widget. This includes structural elements like `AppBar`, `Column`, `Row`, stylistic elements like `Text`, `Padding`, and even invisible elements for layout like `Expanded`. Widgets describe what their view should look like given their current configuration and state.\"\n  },\n  {\n    \"question\": \"What's the difference between a `StatelessWidget` and a `StatefulWidget`?\",\n    \"answer\": \"`StatelessWidget`s are immutable, meaning their properties cannot change after they are created. They are used for UI elements that don't require dynamic updates. `StatefulWidget`s, on the other hand, can change their state over time. They have an associated `State` object that holds the mutable data and is responsible for updating the UI when the data changes.\"\n  },\n  {\n    \"question\": \"How do you organize widgets in Flutter layouts? Give examples of common layout widgets.\",\n    \"answer\": \"Flutter offers various layout widgets to organize UI elements. Common examples include:\\n\\n*   `Column`: Arranges widgets vertically.\\n*   `Row`: Arranges widgets horizontally.\\n*   `Stack`: Positions widgets on top of each other.\\n*   `Container`: Adds padding, margins, background color, and other styling to a widget.\\n*   `Center`: Centers its child widget.\\n*   `Expanded`: Makes a child fill the available space in a `Row` or `Column`.\"\n  },\n  {\n    \"question\": \"Explain the concept of 'BuildContext' in Flutter.\",\n    \"answer\": \"BuildContext is a handle to the location of a widget in the widget tree. It provides access to the widget's ancestors, allowing you to access theme data, media queries, and perform actions like navigating between screens.\"\n  },\n  {\n    \"question\": \"What is the purpose of the `Scaffold` widget in Flutter?\",\n    \"answer\": \"The `Scaffold` widget provides a basic app layout structure. It typically includes elements like an `AppBar` for the top bar, a `Body` for the main content, a `FloatingActionButton`, a `Drawer` for navigation, and a `BottomNavigationBar` for bottom navigation.\"\n  },\n  {\n    \"question\": \"Describe the two primary ways to navigate between screens in Flutter.\",\n    \"answer\": \"Two common ways to navigate between screens in Flutter are:\\n\\n*   **Using `Navigator.push()` and `Navigator.pop()`:**  This approach adds a new route to the navigation stack (`push`) and removes the current route to go back (`pop`).\\n*   **Using Named Routes:**  This involves defining routes using the `routes` parameter in `MaterialApp` and then navigating using `Navigator.pushNamed()` and `Navigator.pop()`.\"\n  },\n  {\n    \"question\": \"How do you pass data between screens during navigation in Flutter?\",\n    \"answer\": \"Data can be passed between screens in several ways during navigation:\\n\\n*   **Constructor Arguments:** When using `Navigator.push`, you can create a new instance of the target screen's widget and pass data through its constructor arguments.\\n*   **`Navigator.pop()` with a Result:**  When returning to a previous screen, you can use `Navigator.pop()` to pass data back to the calling screen.\\n*   **Global State Management (Provider, Riverpod, BLoC):** For more complex data sharing across multiple screens, consider using a state management solution.\"\n  },\n  {\n    \"question\": \"Explain how to define and use named routes in Flutter.\",\n    \"answer\": \"To define named routes, you use the `routes` parameter within the `MaterialApp` widget. You assign a string name to each route and map it to a widget builder function. To navigate, use `Navigator.pushNamed(context, '/routeName')`. The widget builder function will be called to build the corresponding screen.\\n\\nExample:\\n\\n```dart\\nMaterialApp(\\n  routes: {\\n    '/': (context) => HomeScreen(),\\n    '/details': (context) => DetailsScreen(),\\n  },\\n)\\n\\nNavigator.pushNamed(context, '/details');\\n```\"\n  },\n  {\n    \"question\": \"What are some common UI widgets used for displaying text, images, and buttons in Flutter?\",\n    \"answer\": \"Common UI widgets include:\\n\\n*   **Text:** Displays text with customizable styling.\\n*   **Image:** Displays images from various sources (assets, network, memory).\\n*   **ElevatedButton/TextButton/OutlinedButton:** Creates clickable buttons with different styles.\\n*   **Icon:** Displays icons.\\n*   **TextField:** Allows users to input text.\"\n  }\n]\n```"},
        ],
      },
    ],
  });